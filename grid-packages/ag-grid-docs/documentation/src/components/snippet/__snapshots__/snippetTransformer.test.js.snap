// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snippet Component given a mix of grid options it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    [defaultColDef]=\\"defaultColDef\\"
    [rowHeight]=\\"rowHeight\\"
    [rowDragManaged]=\\"rowDragManaged\\"
    [rowSelection]=\\"rowSelection\\"
    [postSort]=\\"postSort\\"
    /* other grid options ... */>
</ag-grid-angular>

// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.rowSelection = 'single';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given a mix of grid options it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    [defaultColDef]=\\"defaultColDef\\"
    [rowHeight]=\\"rowHeight\\"
    [rowDragManaged]=\\"rowDragManaged\\"
    [rowSelection]=\\"rowSelection\\"
    [postSort]=\\"postSort\\"
    /* other grid options ... */>
</ag-grid-angular>

// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];

// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};

// numeric property
this.rowHeight = 50;

// boolean property
this.rowDragManaged = true;

// string property
this.rowSelection = 'single';

// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given a mix of grid options it should create 'angular' snippets without framework context 1`] = `
"// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.rowSelection = 'single';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given a mix of grid options it should create 'angular' snippets without framework context and space between properties 1`] = `
"// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];

// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};

// numeric property
this.rowHeight = 50;

// boolean property
this.rowDragManaged = true;

// string property
this.rowSelection = 'single';

// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given a mix of grid options it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    // columnDefs property (special)
    columnDefs: [
        { headerName: 'A', field: 'a' },
        { headerName: 'B', field: 'b' },
        { headerName: 'C', field: 'c' },
    ],
    // object property
    defaultColDef: {
        // set every column width
        width: 100,
    },
    // numeric property
    rowHeight: 50,
    // boolean property
    rowDragManaged: true,
    // string property
    rowSelection: 'single',
    // function property
    postSort: rowNodes => {
        // here we put Ireland rows on top while preserving the sort order  
        let nextInsertPos = 0;
        for (let i = 0; i < rowNodes.length; i++) {
            const country = rowNodes[i].data.country;      
            if (country === 'Ireland') {        
                rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
                nextInsertPos++;
            }
        }
    },

    // other grid options ...
}"
`;

exports[`Snippet Component given a mix of grid options it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    // columnDefs property (special)
    columnDefs: [
        { headerName: 'A', field: 'a' },
        { headerName: 'B', field: 'b' },
        { headerName: 'C', field: 'c' },
    ],

    // object property
    defaultColDef: {
        // set every column width
        width: 100,
    },

    // numeric property
    rowHeight: 50,

    // boolean property
    rowDragManaged: true,

    // string property
    rowSelection: 'single',

    // function property
    postSort: rowNodes => {
        // here we put Ireland rows on top while preserving the sort order  
        let nextInsertPos = 0;
        for (let i = 0; i < rowNodes.length; i++) {
            const country = rowNodes[i].data.country;      
            if (country === 'Ireland') {        
                rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
                nextInsertPos++;
            }
        }
    },

    // other grid options ...
}"
`;

exports[`Snippet Component given a mix of grid options it should create 'javascript' snippets without framework context 1`] = `
"// columnDefs property (special)
columnDefs: [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
],
// object property
defaultColDef: {
    // set every column width
    width: 100,
},
// numeric property
rowHeight: 50,
// boolean property
rowDragManaged: true,
// string property
rowSelection: 'single',
// function property
postSort: rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
},"
`;

exports[`Snippet Component given a mix of grid options it should create 'javascript' snippets without framework context and space between properties 1`] = `
"// columnDefs property (special)
columnDefs: [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
],

// object property
defaultColDef: {
    // set every column width
    width: 100,
},

// numeric property
rowHeight: 50,

// boolean property
rowDragManaged: true,

// string property
rowSelection: 'single',

// function property
postSort: rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
},"
`;

exports[`Snippet Component given a mix of grid options it should create 'react' snippets 1`] = `
"// object property
const defaultColDef = {
    // set every column width
    width: 100,
};
// numeric property
const rowHeight = 50;
// boolean property
const rowDragManaged = true;
// string property
const rowSelection = 'single';
// function property
const postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};

<AgGridReact
    defaultColDef={defaultColDef}
    rowHeight={rowHeight}
    rowDragManaged={rowDragManaged}
    rowSelection={rowSelection}
    postSort={postSort}
>
    {/* columnDefs property (special) */}
    <AgGridColumn headerName=\\"A\\" field=\\"a\\" />
    <AgGridColumn headerName=\\"B\\" field=\\"b\\" />
    <AgGridColumn headerName=\\"C\\" field=\\"c\\" />
</AgGridReact>"
`;

exports[`Snippet Component given a mix of grid options it should create 'react' snippets with space between properties 1`] = `
"// object property
const defaultColDef = {
    // set every column width
    width: 100,
};

// numeric property
const rowHeight = 50;

// boolean property
const rowDragManaged = true;

// string property
const rowSelection = 'single';

// function property
const postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};

<AgGridReact
    defaultColDef={defaultColDef}
    rowHeight={rowHeight}
    rowDragManaged={rowDragManaged}
    rowSelection={rowSelection}
    postSort={postSort}
>
    {/* columnDefs property (special) */}
    <AgGridColumn headerName=\\"A\\" field=\\"a\\" />
    <AgGridColumn headerName=\\"B\\" field=\\"b\\" />
    <AgGridColumn headerName=\\"C\\" field=\\"c\\" />
</AgGridReact>"
`;

exports[`Snippet Component given a mix of grid options it should create 'react' snippets without framework context 1`] = `
"// object property
const defaultColDef = {
    // set every column width
    width: 100,
};
// numeric property
const rowHeight = 50;
// boolean property
const rowDragManaged = true;
// string property
const rowSelection = 'single';
// function property
const postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};

<AgGridReact
    defaultColDef={defaultColDef}
    rowHeight={rowHeight}
    rowDragManaged={rowDragManaged}
    rowSelection={rowSelection}
    postSort={postSort}
>
    {/* columnDefs property (special) */}
    <AgGridColumn headerName=\\"A\\" field=\\"a\\" />
    <AgGridColumn headerName=\\"B\\" field=\\"b\\" />
    <AgGridColumn headerName=\\"C\\" field=\\"c\\" />
</AgGridReact>"
`;

exports[`Snippet Component given a mix of grid options it should create 'react' snippets without framework context and space between properties 1`] = `
"// object property
const defaultColDef = {
    // set every column width
    width: 100,
};

// numeric property
const rowHeight = 50;

// boolean property
const rowDragManaged = true;

// string property
const rowSelection = 'single';

// function property
const postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};

<AgGridReact
    defaultColDef={defaultColDef}
    rowHeight={rowHeight}
    rowDragManaged={rowDragManaged}
    rowSelection={rowSelection}
    postSort={postSort}
>
    {/* columnDefs property (special) */}
    <AgGridColumn headerName=\\"A\\" field=\\"a\\" />
    <AgGridColumn headerName=\\"B\\" field=\\"b\\" />
    <AgGridColumn headerName=\\"C\\" field=\\"c\\" />
</AgGridReact>"
`;

exports[`Snippet Component given a mix of grid options it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    [defaultColDef]=\\"defaultColDef\\"
    [rowHeight]=\\"rowHeight\\"
    [rowDragManaged]=\\"rowDragManaged\\"
    [rowSelection]=\\"rowSelection\\"
    [postSort]=\\"postSort\\"
    /* other grid options ... */>
</ag-grid-vue>

// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.rowSelection = 'single';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given a mix of grid options it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    [defaultColDef]=\\"defaultColDef\\"
    [rowHeight]=\\"rowHeight\\"
    [rowDragManaged]=\\"rowDragManaged\\"
    [rowSelection]=\\"rowSelection\\"
    [postSort]=\\"postSort\\"
    /* other grid options ... */>
</ag-grid-vue>

// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];

// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};

// numeric property
this.rowHeight = 50;

// boolean property
this.rowDragManaged = true;

// string property
this.rowSelection = 'single';

// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given a mix of grid options it should create 'vue' snippets without framework context 1`] = `
"// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.rowSelection = 'single';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given a mix of grid options it should create 'vue' snippets without framework context and space between properties 1`] = `
"// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];

// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};

// numeric property
this.rowHeight = 50;

// boolean property
this.rowDragManaged = true;

// string property
this.rowSelection = 'single';

// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given api statements it should create 'angular' snippets 1`] = `
"// save the columns state
const savedState = this.gridColumnApi.getColumnState(); 

// restore the column state
this.gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'angular' snippets with space between properties 1`] = `
"// save the columns state
const savedState = this.gridColumnApi.getColumnState(); 

// restore the column state
this.gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'angular' snippets without framework context 1`] = `
"// save the columns state
const savedState = this.gridColumnApi.getColumnState(); 

// restore the column state
this.gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'angular' snippets without framework context and space between properties 1`] = `
"// save the columns state
const savedState = this.gridColumnApi.getColumnState(); 

// restore the column state
this.gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'javascript' snippets 1`] = `
"// save the columns state
const savedState = gridOptions.columnApi.getColumnState(); 

// restore the column state
gridOptions.columnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridOptions.api.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'javascript' snippets with space between properties 1`] = `
"// save the columns state
const savedState = gridOptions.columnApi.getColumnState(); 

// restore the column state
gridOptions.columnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridOptions.api.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'javascript' snippets without framework context 1`] = `
"// save the columns state
const savedState = gridOptions.columnApi.getColumnState(); 

// restore the column state
gridOptions.columnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridOptions.api.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'javascript' snippets without framework context and space between properties 1`] = `
"// save the columns state
const savedState = gridOptions.columnApi.getColumnState(); 

// restore the column state
gridOptions.columnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridOptions.api.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'react' snippets 1`] = `
"// save the columns state
const savedState = gridColumnApi.getColumnState(); 

// restore the column state
gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'react' snippets with space between properties 1`] = `
"// save the columns state
const savedState = gridColumnApi.getColumnState(); 

// restore the column state
gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'react' snippets without framework context 1`] = `
"// save the columns state
const savedState = gridColumnApi.getColumnState(); 

// restore the column state
gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'react' snippets without framework context and space between properties 1`] = `
"// save the columns state
const savedState = gridColumnApi.getColumnState(); 

// restore the column state
gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'vue' snippets 1`] = `
"// save the columns state
const savedState = this.gridColumnApi.getColumnState(); 

// restore the column state
this.gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'vue' snippets with space between properties 1`] = `
"// save the columns state
const savedState = this.gridColumnApi.getColumnState(); 

// restore the column state
this.gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'vue' snippets without framework context 1`] = `
"// save the columns state
const savedState = this.gridColumnApi.getColumnState(); 

// restore the column state
this.gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component given api statements it should create 'vue' snippets without framework context and space between properties 1`] = `
"// save the columns state
const savedState = this.gridColumnApi.getColumnState(); 

// restore the column state
this.gridColumnApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-angular>

this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-angular>

this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'angular' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'angular' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            field: 'country',
            // col span is 2 for rows with Russia, but 1 for everything else
            colSpan: params => params.data.country === 'Russia' ? 2 : 1,
        },        
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            field: 'country',
            // col span is 2 for rows with Russia, but 1 for everything else
            colSpan: params => params.data.country === 'Russia' ? 2 : 1,
        },        
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'javascript' snippets without framework context 1`] = `
"columnDefs: [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
],"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'javascript' snippets without framework context and space between properties 1`] = `
"columnDefs: [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
],"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'react' snippets 1`] = `
"// col span is 2 for rows with Russia, but 1 for everything else
const countryColSpan = params => params.data.country === 'Russia' ? 2 : 1;

<AgGridReact>
    <AgGridColumn field=\\"country\\" colSpan={countryColSpan} />
</AgGridReact>"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'react' snippets with space between properties 1`] = `
"// col span is 2 for rows with Russia, but 1 for everything else
const countryColSpan = params => params.data.country === 'Russia' ? 2 : 1;

<AgGridReact>
    <AgGridColumn field=\\"country\\" colSpan={countryColSpan} />
</AgGridReact>"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'react' snippets without framework context 1`] = `"<AgGridColumn field=\\"country\\" colSpan={countryColSpan} />"`;

exports[`Snippet Component given col defs with arrow function properties it should create 'react' snippets without framework context and space between properties 1`] = `"<AgGridColumn field=\\"country\\" colSpan={countryColSpan} />"`;

exports[`Snippet Component given col defs with arrow function properties it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'vue' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component given col defs with arrow function properties it should create 'vue' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component given column definitions with functions it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-angular>

this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component given column definitions with functions it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-angular>

this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component given column definitions with functions it should create 'angular' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component given column definitions with functions it should create 'angular' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component given column definitions with functions it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            field: 'age',
            // simple number comparator
            comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
        },
        {
            field: 'name',
            // simple string comparator
            comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
                if (valueA == valueB) return 0;
                return (valueA > valueB) ? 1 : -1;
            }
        }
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component given column definitions with functions it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            field: 'age',
            // simple number comparator
            comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
        },
        {
            field: 'name',
            // simple string comparator
            comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
                if (valueA == valueB) return 0;
                return (valueA > valueB) ? 1 : -1;
            }
        }
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component given column definitions with functions it should create 'javascript' snippets without framework context 1`] = `
"columnDefs: [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
],"
`;

exports[`Snippet Component given column definitions with functions it should create 'javascript' snippets without framework context and space between properties 1`] = `
"columnDefs: [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
],"
`;

exports[`Snippet Component given column definitions with functions it should create 'react' snippets 1`] = `
"// simple number comparator
const ageComparator = (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB;
// simple string comparator
const nameComparator = (valueA, valueB, nodeA, nodeB, isInverted) => {
    if (valueA == valueB) return 0;
    return (valueA > valueB) ? 1 : -1;
};

<AgGridReact>
    <AgGridColumn field=\\"age\\" comparator={ageComparator} />
    <AgGridColumn field=\\"name\\" comparator={nameComparator} />
</AgGridReact>"
`;

exports[`Snippet Component given column definitions with functions it should create 'react' snippets with space between properties 1`] = `
"// simple number comparator
const ageComparator = (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB;

// simple string comparator
const nameComparator = (valueA, valueB, nodeA, nodeB, isInverted) => {
    if (valueA == valueB) return 0;
    return (valueA > valueB) ? 1 : -1;
};

<AgGridReact>
    <AgGridColumn field=\\"age\\" comparator={ageComparator} />
    <AgGridColumn field=\\"name\\" comparator={nameComparator} />
</AgGridReact>"
`;

exports[`Snippet Component given column definitions with functions it should create 'react' snippets without framework context 1`] = `
"<AgGridColumn field=\\"age\\" comparator={ageComparator} />
<AgGridColumn field=\\"name\\" comparator={nameComparator} />"
`;

exports[`Snippet Component given column definitions with functions it should create 'react' snippets without framework context and space between properties 1`] = `
"<AgGridColumn field=\\"age\\" comparator={ageComparator} />
<AgGridColumn field=\\"name\\" comparator={nameComparator} />"
`;

exports[`Snippet Component given column definitions with functions it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component given column definitions with functions it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component given column definitions with functions it should create 'vue' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component given column definitions with functions it should create 'vue' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-angular>

// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-angular>

// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'angular' snippets without framework context 1`] = `
"// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'angular' snippets without framework context and space between properties 1`] = `
"// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    // 2 levels of grouping
    columnDefs: [
        {
            headerName: 'G1',
            children: [
                { headerName: 'C1', field: 'c1' },
                {
                    headerName: 'G2',
                    children: [
                        { headerName: 'C2', field: 'c2' },
                        { headerName: 'C3', field: 'c3' },
                    ],
                },
                { headerName: 'C4', field: 'c4' },
            ],
        },
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component given column definitions with group columns it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    // 2 levels of grouping
    columnDefs: [
        {
            headerName: 'G1',
            children: [
                { headerName: 'C1', field: 'c1' },
                {
                    headerName: 'G2',
                    children: [
                        { headerName: 'C2', field: 'c2' },
                        { headerName: 'C3', field: 'c3' },
                    ],
                },
                { headerName: 'C4', field: 'c4' },
            ],
        },
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component given column definitions with group columns it should create 'javascript' snippets without framework context 1`] = `
"// 2 levels of grouping
columnDefs: [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
],"
`;

exports[`Snippet Component given column definitions with group columns it should create 'javascript' snippets without framework context and space between properties 1`] = `
"// 2 levels of grouping
columnDefs: [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
],"
`;

exports[`Snippet Component given column definitions with group columns it should create 'react' snippets 1`] = `
"<AgGridReact>
    {/* 2 levels of grouping */}
    <AgGridColumn headerName=\\"G1\\">
        <AgGridColumn headerName=\\"C1\\" field=\\"c1\\" />
        <AgGridColumn headerName=\\"G2\\">
            <AgGridColumn headerName=\\"C2\\" field=\\"c2\\" />
            <AgGridColumn headerName=\\"C3\\" field=\\"c3\\" />
        </AgGridColumn>
        <AgGridColumn headerName=\\"C4\\" field=\\"c4\\" />
    </AgGridColumn>
</AgGridReact>"
`;

exports[`Snippet Component given column definitions with group columns it should create 'react' snippets with space between properties 1`] = `
"<AgGridReact>
    {/* 2 levels of grouping */}
    <AgGridColumn headerName=\\"G1\\">
        <AgGridColumn headerName=\\"C1\\" field=\\"c1\\" />
        <AgGridColumn headerName=\\"G2\\">
            <AgGridColumn headerName=\\"C2\\" field=\\"c2\\" />
            <AgGridColumn headerName=\\"C3\\" field=\\"c3\\" />
        </AgGridColumn>
        <AgGridColumn headerName=\\"C4\\" field=\\"c4\\" />
    </AgGridColumn>
</AgGridReact>"
`;

exports[`Snippet Component given column definitions with group columns it should create 'react' snippets without framework context 1`] = `
"{/* 2 levels of grouping */}
<AgGridColumn headerName=\\"G1\\">
    <AgGridColumn headerName=\\"C1\\" field=\\"c1\\" />
    <AgGridColumn headerName=\\"G2\\">
        <AgGridColumn headerName=\\"C2\\" field=\\"c2\\" />
        <AgGridColumn headerName=\\"C3\\" field=\\"c3\\" />
    </AgGridColumn>
    <AgGridColumn headerName=\\"C4\\" field=\\"c4\\" />
</AgGridColumn>"
`;

exports[`Snippet Component given column definitions with group columns it should create 'react' snippets without framework context and space between properties 1`] = `
"{/* 2 levels of grouping */}
<AgGridColumn headerName=\\"G1\\">
    <AgGridColumn headerName=\\"C1\\" field=\\"c1\\" />
    <AgGridColumn headerName=\\"G2\\">
        <AgGridColumn headerName=\\"C2\\" field=\\"c2\\" />
        <AgGridColumn headerName=\\"C3\\" field=\\"c3\\" />
    </AgGridColumn>
    <AgGridColumn headerName=\\"C4\\" field=\\"c4\\" />
</AgGridColumn>"
`;

exports[`Snippet Component given column definitions with group columns it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-vue>

// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-vue>

// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'vue' snippets without framework context 1`] = `
"// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'vue' snippets without framework context and space between properties 1`] = `
"// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given complex column definition with array property it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-angular>

this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component given complex column definition with array property it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-angular>

this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component given complex column definition with array property it should create 'angular' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component given complex column definition with array property it should create 'angular' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component given complex column definition with array property it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            filterType: 'multi',
            filterModels: [
                null,
                { filterType: 'set', values: ['A', 'B', 'C'] }
            ]
        }
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component given complex column definition with array property it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            filterType: 'multi',
            filterModels: [
                null,
                { filterType: 'set', values: ['A', 'B', 'C'] }
            ]
        }
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component given complex column definition with array property it should create 'javascript' snippets without framework context 1`] = `
"columnDefs: [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
],"
`;

exports[`Snippet Component given complex column definition with array property it should create 'javascript' snippets without framework context and space between properties 1`] = `
"columnDefs: [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
],"
`;

exports[`Snippet Component given complex column definition with array property it should create 'react' snippets 1`] = `
"const filterModels = [
    null,
    { filterType: 'set', values: ['A', 'B', 'C'] }
];

<AgGridReact>
    <AgGridColumn filterType=\\"multi\\" filterModels={filterModels} />
</AgGridReact>"
`;

exports[`Snippet Component given complex column definition with array property it should create 'react' snippets with space between properties 1`] = `
"const filterModels = [
    null,
    { filterType: 'set', values: ['A', 'B', 'C'] }
];

<AgGridReact>
    <AgGridColumn filterType=\\"multi\\" filterModels={filterModels} />
</AgGridReact>"
`;

exports[`Snippet Component given complex column definition with array property it should create 'react' snippets without framework context 1`] = `"<AgGridColumn filterType=\\"multi\\" filterModels={filterModels} />"`;

exports[`Snippet Component given complex column definition with array property it should create 'react' snippets without framework context and space between properties 1`] = `"<AgGridColumn filterType=\\"multi\\" filterModels={filterModels} />"`;

exports[`Snippet Component given complex column definition with array property it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component given complex column definition with array property it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component given complex column definition with array property it should create 'vue' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component given complex column definition with array property it should create 'vue' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component given function declaration it should create 'angular' snippets 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'angular' snippets with space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'angular' snippets without framework context 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'angular' snippets without framework context and space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'javascript' snippets 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'javascript' snippets with space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'javascript' snippets without framework context 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'javascript' snippets without framework context and space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'react' snippets 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'react' snippets with space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'react' snippets without framework context 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'react' snippets without framework context and space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'vue' snippets 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'vue' snippets with space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'vue' snippets without framework context 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given function declaration it should create 'vue' snippets without framework context and space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component given simple column definitions it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-angular>

// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-angular>

// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'angular' snippets without framework context 1`] = `
"// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'angular' snippets without framework context and space between properties 1`] = `
"// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    // define 3 columns
    columnDefs: [
        { headerName: 'A', field: 'a' },
        { headerName: 'B', field: 'b' },
        { headerName: 'C', field: 'c' },
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component given simple column definitions it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    // define 3 columns
    columnDefs: [
        { headerName: 'A', field: 'a' },
        { headerName: 'B', field: 'b' },
        { headerName: 'C', field: 'c' },
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component given simple column definitions it should create 'javascript' snippets without framework context 1`] = `
"// define 3 columns
columnDefs: [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
],"
`;

exports[`Snippet Component given simple column definitions it should create 'javascript' snippets without framework context and space between properties 1`] = `
"// define 3 columns
columnDefs: [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
],"
`;

exports[`Snippet Component given simple column definitions it should create 'react' snippets 1`] = `
"<AgGridReact>
    {/* define 3 columns */}
    <AgGridColumn headerName=\\"A\\" field=\\"a\\" />
    <AgGridColumn headerName=\\"B\\" field=\\"b\\" />
    <AgGridColumn headerName=\\"C\\" field=\\"c\\" />
</AgGridReact>"
`;

exports[`Snippet Component given simple column definitions it should create 'react' snippets with space between properties 1`] = `
"<AgGridReact>
    {/* define 3 columns */}
    <AgGridColumn headerName=\\"A\\" field=\\"a\\" />
    <AgGridColumn headerName=\\"B\\" field=\\"b\\" />
    <AgGridColumn headerName=\\"C\\" field=\\"c\\" />
</AgGridReact>"
`;

exports[`Snippet Component given simple column definitions it should create 'react' snippets without framework context 1`] = `
"{/* define 3 columns */}
<AgGridColumn headerName=\\"A\\" field=\\"a\\" />
<AgGridColumn headerName=\\"B\\" field=\\"b\\" />
<AgGridColumn headerName=\\"C\\" field=\\"c\\" />"
`;

exports[`Snippet Component given simple column definitions it should create 'react' snippets without framework context and space between properties 1`] = `
"{/* define 3 columns */}
<AgGridColumn headerName=\\"A\\" field=\\"a\\" />
<AgGridColumn headerName=\\"B\\" field=\\"b\\" />
<AgGridColumn headerName=\\"C\\" field=\\"c\\" />"
`;

exports[`Snippet Component given simple column definitions it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-vue>

// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    /* other grid options ... */>
</ag-grid-vue>

// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'vue' snippets without framework context 1`] = `
"// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'vue' snippets without framework context and space between properties 1`] = `
"// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;
