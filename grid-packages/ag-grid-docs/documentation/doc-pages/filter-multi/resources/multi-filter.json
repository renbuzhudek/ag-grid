{
    "filterParams": {
        "filters": {
            "description": "An array of filter definition objects.",
            "type": "IFilterDef[]"
        }
    },
    "filterDef": {
        "filter<br />filterFramework": {
            "description": "Child filter component to use inside the Multi Filter."
        },
        "filterParams": {
            "description": "Custom parameters to be passed to the child filter component.",
            "type": "object"
        },
        "floatingFilterComponent<br />floatingFilterComponentFramework": {
            "description": "Floating filter component to use for the child filter."
        },
        "floatingFilterComponentParams": {
            "description": "Custom parameters to be passed to the floating filter component.",
            "type": "object"
        },
        "display": {
            "default": "inline",
            "options": [
                "inline",
                "subMenu",
                "accordion"
            ],
            "description": "Configures how the filter is shown in the Multi Filter.",
            "more": {
                "url": "/filter-multi/#display-style",
                "name": "Display Style"
            }
        },
        "title": {
            "description": "The title to be used when a filter is displayed inside a sub-menu or accordion.",
            "type": "string"
        }
    },
    "api": {
        "setModel()": {
            "description": "Sets the state of the child filters using the supplied models. Providing `null` will de-activate all child filters.<br /><br />**Note:** if you are [providing values asynchronously](/filter-set-filter-list/#asynchronous-values) to a child [Set Filter](/filter-set/), you need to wait for these changes to be applied before performing any further actions by waiting on the returned grid promise, e.g. `filter.setModel([null, { values: ['a', 'b'] }]).then(function() { gridApi.onFilterChanged(); });`",
            "type": {
                "arguments": {
                    "model": [
                        "object",
                        "null"
                    ]
                }
            }
        },
        "getChildFilterInstance()": {
            "description": "Returns the child filter instance at the specified index.",
            "type": {
                "arguments": {
                    "index": "number"
                },
                "returnType": "IFilter"
            },
            "more": {
                "url": "/filter-multi/#accessing-child-filters",
                "name": "Accessing Child Filters"
            }
        }
    }
}