{
    "rowNodeAttributes": {
        "meta": {
            "displayName": "All Row Node Attributes"
        },
        "id": {
            "description": "Unique ID for the node. Either provided by the application, or generated by the grid if not."
        },
        "data": {
            "description": "The data as provided by the application."
        },
        "displayed": {
            "description": "This will be `true` if it has a rowIndex assigned, otherwise `false`."
        },
        "parent": {
            "description": "The parent node to this node, or empty if top level."
        },
        "level": {
            "description": "How many levels this node is from the top when grouping."
        },
        "uiLevel": {
            "description": "How many levels this node is from the top when grouping in the UI (only different to <code>parent</code> when <code>groupRemoveSingleChildren=true</code>)."
        },
        "group": {
            "description": "<code>true</code> if this node is a group node (i.e. has children)."
        },
        "rowPinned": {
            "description": "<code>'top'</code> or <code>'bottom'</code> if pinned row, otherwise <code>null</code> or <code>undefined</code>."
        },
        "childIndex": {
            "description": "Index of this row with respect to its parent when grouping. Changes when data is sorted."
        },
        "firstChild": {
            "description": "<code>true</code> if this is the first child in this group. Changes when data is sorted."
        },
        "lastChild": {
            "description": "<code>true</code> if this is the last child in this group. Changes when data is sorted."
        },
        "stub": {
            "description": "Used by server-side row model. <code>true</code> if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded."
        },
        "rowHeight": {
            "description": "The row height in pixels."
        },
        "rowIndex": {
            "description": "The current row index. If the row is filtered out or in a collapsed group, this value will be `null`."
        },
        "rowTop": {
            "description": "The row top position in pixels."
        },
        "quickFilterAggregateText": {
            "description": "If using quick filter, stores a string representation of the row for searching against."
        }
    },
    "groupNodeAttributes": {
        "meta": {
            "displayName": "Group Node Attributes"
        },
        "groupData": {
            "description": "If using grid grouping, contains the group values for this group."
        },
        "aggData": {
            "description": "If using grid grouping and aggregation, contains the aggregation data."
        },
        "key": {
            "description": "The key for the grouping e.g. Ireland, UK, USA."
        },
        "field": {
            "description": "The field (string) we are grouping on e.g. <code>'country'</code>."
        },
        "rowGroupColumn": {
            "description": "The row group column used for this group, e.g. the Country column instance."
        },
        "rowGroupIndex": {
            "description": "If doing in-memory (client-side) grouping, this is the index of the group column this cell is for. This will always be the same as the level, unless we are collapsing groups, i.e. <code>groupRemoveSingleChildren=true</code>."
        },
        "expanded": {
            "description": "<code>true</code> if group is expanded, otherwise <code>false</code>."
        },
        "footer": {
            "description": "<code>true</code> if row is a footer. Footers have <code>group = true</code> and <code>footer = true</code>."
        },
        "allLeafChildren": {
            "description": "All lowest level nodes beneath this node, no groups."
        },
        "childrenAfterGroup": {
            "description": "Children of this group. If multi levels of grouping, shows only immediate children."
        },
        "childrenAfterFilter": {
            "description": "Filtered children of this group."
        },
        "childrenAfterSort": {
            "description": "Sorted children of this group."
        },
        "allChildrenCount": {
            "description": "Number of children and grandchildren."
        },
        "leafGroup": {
            "description": "<code>true</code> if this node is a group and the group is the bottom level in the tree."
        },
        "sibling": {
            "description": "If using footers, reference to the footer node for this group."
        }
    },
    "rowNodeMethods": {
        "meta": {
            "displayName": "Row Node Methods"
        },
        "setSelected(newValue: boolean, clearSelection: boolean)": {
            "description": "Select (or deselect) the node. <code>newValue=true</code> for selection, <code>newValue=false</code> for deselection. If selecting, then passing <code>true</code> for <code>clearSelection</code> will select the node exclusively (i.e. NOT do multi select). If doing deselection, <code>clearSelection</code> has no impact."
        },
        "isSelected()": {
            "description": "Returns <code>true</code> if node is selected, <code>false</code> if the not isn't selected or `undefined` if it's partially selected (group where not all children are selected)."
        },
        "addEventListener(eventType: string, listener: Function)": {
            "description": "Add an event listener. Currently only <code>rowSelected</code> event supported."
        },
        "removeEventListener(eventType: string, listener: Function)": {
            "description": "Remove event listener."
        },
        "resetQuickFilterAggregateText()": {
            "description": "The first time <code>quickFilter</code> runs, the grid creates a one-off string representation of the row. This string is then used for the quick filter instead of hitting each column separately. When you edit, using grid editing, this string gets cleared down. However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values. Otherwise new values will not work with the <code>quickFilter</code>."
        },
        "depthFirstSearch(callback)": {
            "description": "Perform a depth-first search of this node and its children."
        },
        "setRowHeight(height)": {
            "description": "Sets the row height. Call if you want to change the height initially assigned to the row. After calling, you must call <code>api.onRowHeightChanged()</code> so the grid knows it needs to work out the placement of the rows."
        },
        "setData(newData)": {
            "description": "Sets the data for this item. Results in the entire row getting refreshed."
        }
    },
    "rowNodeEvents": {
        "meta": {
            "displayName": "Events on Row Nodes",
            "description": "The following events can be listened to on <code>rowNodes</code>:"
        },
        "rowSelected": {
            "description": "Row was selected or unselected."
        },
        "mouseEnter": {
            "description": "Mouse has entered the row."
        },
        "mouseLeave": {
            "description": "Mouse has left the row."
        },
        "cellChanged": {
            "description": "One cell value has changed."
        },
        "allChildrenCountChanged": {
            "description": "<code>allChildrenCount</code> has changed."
        },
        "dataChanged": {
            "description": "<code>rowData</code> has changed."
        },
        "heightChanged": {
            "description": "<code>rowHeight</code> has changed."
        },
        "topChanged": {
            "description": "<code>rowTop</code> has changed."
        },
        "firstChildChanged": {
            "description": "<code>firstChild</code> has changed."
        },
        "lastChildChanged": {
            "description": "<code>lastChild</code> has changed."
        },
        "childIndexChanged": {
            "description": "<code>childIndex</code> has changed."
        },
        "rowIndexChanged": {
            "description": "<code>rowIndex</code> has changed."
        },
        "expandedChanged": {
            "description": "<code>expanded</code> has changed."
        },
        "uiLevelChanged": {
            "description": "<code>uiLevel</code> has changed."
        }
    }
}